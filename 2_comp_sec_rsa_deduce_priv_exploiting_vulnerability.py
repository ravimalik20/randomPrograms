from fractions import gcd
import base64

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m

c1 = "3ae81964c8ecf1524b47c42cb0ecd2a3b6768dccd55960d7ff0a998f839b8c312a2cd821c270ae961777dd4dd50aa631fe823a8afd914911adf69c1c6cfda3b3aed01dad372cfdd6e9f63a4cc39e1a455cbfd04dea72bf07c4790d5fec469198ce28113d6d38a7baced9d3c3695ab27cbc5ab434aa8d2b5f53f66a383e079ddaed485d4a2b446e410eafcadbba9f159494c28c4a19fd416dff90f8c141e96d8260f8e6e0901832e31899c48ce0cbdae6a24595a19a01e490c87e7b48860e09006920d8ef7384217358c6db90638d6e8cbc795a091240f24105d8f3b27fe4b98fe9a507e00590b4cded41777b1b8967b0f752231e0e856b8f0132bde30a6e082e"
c2 = "391e0340e5931a202012572ddacad877e5af3a1d846b70c1e64e3041f9ac0a3c7e8f82621df908eadca44fe777a6b1c799610be829e13ca233982fd268034addb5a79fa19f984631fdf3a61d32fc75ed77176c7a0b719504e804076dca66f10111aa124a7efe743ada75dda2ec53f3c28882a7724928685918261739f960a3648aa3eadc426181aa146a8ba0ff20f1c53de2113e0196af09595dc2ad1a0fe12096ff681f61363044615a7f72edf1f8c6531055e66c1e5f4498434c731d2308fecae46c779379ea3d7d7a5f1c2a0efeb5bc1b8a4af4fb21fce1dae943c27043e86642b3b1e6b889a31e7c4bc01bc2ebae4dc8432344532567d1d3df8b9bcafcbf"

n = 29327850486975077954317709506799622915588857966896778318115598344455890070959927006926810612222024225768341822112778000187507517166593745638960588299846705687790684051482653083351632939692655936840525916241013974046302069194293072669512824844198226032545778378323305463345116397300592496915493258706173118434162041944344570079998400688655706201477504735565673872643797590308549327458490185382239659524831890657732834868058859381713915190453642358738553777011410499179974986281138263624724940119570258010301077726098830442179627135846653352495979410539119788164279306621154419569604188731389339461710075619781810316627

e = 65537

num1 = int(c1, 16)
num2 = int(c2, 16)

c1_c2 = num1 - num2

print "c1-c2:", c1_c2, "\n"

p = gcd(c1_c2, n)

print "p:", p, "\n"

q = n / p

print "q:", q, "\n"

phi_n = (p - 1) * (q - 1)

print "phi_n:", phi_n, "\n"

d = modinv(e, phi_n)

print "d:", d, "\n"

base64_d = base64.b64encode(str(d))

print "base64_d:", base64_d, "\n"

C = 0x19303a82cbc50a56dc22f9aafc554da2ea632e33bee1d33c35edb13269ba0fd2fa791744e86eda7fc1cb15433f1232f86a42afcd5470215ccf0d05096ce1b8f075e6dc45df74896345297fcc145a4765aeaea78babaa6441ead3a2e73b37931dc7c07d4e04b7115284c7c04c85a61c7e555194d0f4ee762d47a8aeec2efcd75ee45e3e6a65f876f9a67aa01016f3ce9552d8f0b50cc150c70333aa6ac3a4ac8860d2879cad8439566f0ffda32612cb75dd9c1b456a4e1828582f05932f495452f19d71f300f2f48b8c1f8cde1b1b8d8ada3f6ff506e10d5d18d91d61402bc36756a88196381ff795980eee932a179525264e3a968f0abe9edbe672560c41833a 

print pow(C, d, n)

key = "11111010101110101101101010111010101111101100101011111110110111101010110110111110111011110000000100000010000000110000010000000101"

key = int(key, 2)

print hex(key)
